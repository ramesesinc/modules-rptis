import com.rameses.annotations.*;

class RptOboService {
	@DataContext("occupancy_rpt_inspection")
	def em_occupancy;

	@Service('FAASService')
	def faasSvc;

	@DataContext("rysetting_land")
	def em_setting_land;

	@DataContext("realproperty")
	def em_realproperty;

	@DataContext("faas_list")
	def em_faas;

	@ProxyMethod
	public def init(occupancy) {
		occupancy = em_occupancy.find([objid: occupancy.objid]).first();
		if (!occupancy) throw new Exception("Occupancy record does not exist or has already been deleted.");
		def entity = [:];
		entity.occupancy = occupancy;
		if (occupancy.applicant.objid) {
			entity.taxpayer = occupancy.applicant;
			entity.taxpayer.addresstext = occupancy.applicant.address;
		}
		return entity;
	}

	@ProxyMethod
	public def submit(params) {
		def occupancy = em_occupancy.find([objid: params.occupancy.objid]).first();
		if (occupancy.state != "PENDING") throw new Exception("Occupany is invalid. Only pending state is allowed.");


		def landfaas = em_faas.find([objid: params.landfaas.refid]).first();
		if (!landfaas) throw new Exception("Land FAAS does not exist or has already been deleted.");

		def rp = em_realproperty.find([objid: landfaas.realpropertyid]).first();
		def info =[:];
		info.txntype = ["objid":"ND"];
		info.datacapture = false;
		info.ry = em_setting_land.select("ry").where('1=1').orderBy("ry desc").val();
		info.rputype = "bldg";
		info.suffix = params.suffix;
		info.pintype = rp.pintype;
		info.isection = rp.section;
		info.iparcel = rp.parcel;
		info.section = rp.section;
		info.parcel = rp.parcel;
		info.pin = rp.pin;
		info.fullpin = rp.pin + "-" + params.suffix;
		info.lgu = [objid: landfaas.lguid];
		info.barangay = [objid: rp.barangayid];
		info.rp = rp;
		info.barangayid = rp.barangayid;
		def faas = faasSvc.initNewDiscovery(info);
		faas.taxpayer = params.taxpayer;
		faas.owner = params.occupancy.applicant;
		faas.rpu.permitno = params.occupancy.bldgpermitno;
		faas.rpu.swornamount = params.occupancy.projectcost;
		faas.rpu.hasswornamount = true;
		faasSvc.updateFaas(faas);
		em_occupancy.find([objid: params.occupancy.objid]).update([state: "PROCESSING"]);
		return faas;
	}

}
