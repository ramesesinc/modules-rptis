import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


/*----------------------------------------------------------------
* FAAS Annotation Synchronization support shared 
* between province and municipalities 
-----------------------------------------------------------------*/
class FAASAnnotationSyncInterceptor
{
    @Env
    def env

    @Service('RPTMainSyncService')
    def mainSyncSvc

    @Service('RPTSyncService')
    def syncSvc

    @Service('FAASAnnotationSyncService')
    def annotationSync


    /*---------------------------------------------------------
    *
    * SCHEDULING SUPPORT
    *
    ---------------------------------------------------------*/
    @After(pattern="FAASAnnotationService.approve") 
    public void createAnnotation( evt ) {
        def annotation = evt.result 
        mainSyncSvc.createDataForSync(getDataForSync(annotation, 'FAASANNOTATION-POST'))
    }   

    @After(pattern="CancelAnnotationService.approve") 
    public void createCancelAnnotation( evt ) {
        def cancelannotation = evt.result 
        mainSyncSvc.createDataForSync(getDataForSync(cancelannotation, 'FAASANNOTATION-CANCELLED'))
    }   


    /* scheduler */    
    @After(pattern="RPTMainSyncService.scheduleSync", eval="#{result.action.matches('FAASANNOTATION-.*')}", index=50000) 
    public void scheduleFAASForSync( evt ) {
        def data = evt.result 
        annotationSync.schedule(data)
    }   


    /*---------------------------------------------------------
    *
    * SEND/RECEIVE HANDLERS
    *
    ---------------------------------------------------------*/
    @After(pattern="RPTMainSyncService.asyncSend", eval="#{result.action.matches('FAASANNOTATION-.*')}") 
    public void sendData( evt ) {
        def syncdata = evt.result 
        annotationSync.send(syncdata)
    }   

    @After(pattern="RPTMainSyncService.receive", eval="#{args[0].action.matches('FAASANNOTATION-.*')}") 
    public void receiveData(evt){
        def syncdata = evt.args[0]
        annotationSync.receive(syncdata)
        evt.result.status = 'OK'
    }


    def getDataForSync(annotation, action) {
        def data = [:]
        data.objid = annotation.objid
        data.reftype = 'faasannotation'
        data.refno = annotation.txnno
        data.orgid = env.ORGID
        data.remote = syncSvc.getRemoteOrg(annotation)
        data.action = action
        return data
    }

}

