import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*


/*----------------------------------------------------------------
* Consolidation Synchronization support shared 
* between province and municipalities 
-----------------------------------------------------------------*/
class ConsolidationSyncInterceptor
{
    @Env
    def env

    @Service('RPTMainSyncService')
    def syncSvc    

    @Service('ConsolidationSyncService')
    def consolidationSync 


    /*---------------------------------------------------------
    *
    * SCHEDULING SUPPORT
    *
    ---------------------------------------------------------*/
    @After(pattern="ConsolidationWorkflowService.signal", eval="#{args[0].state=='forprovsubmission' && args[0].action=='completed'}", index=10000) 
    public void scheduleSubmitToProvince( evt ) {
        def consolidation = evt.args[0].data;
        syncSvc.createDataForSync(getDataForSync(consolidation, 'CONSOLIDATION-FORAPPROVAL'))
        // consolidationSync.scheduleSubmitToProvince(consolidation)
    }

    @After(pattern="ConsolidationWorkflowService.signal", eval="#{args[0].state.matches('approver|provapprover') && args[0].action=='completed'}", index=10000) 
    public void scheduleConsolidationApproval( evt ) {
        def consolidation = evt.args[0].data;
        syncSvc.createDataForSync(getDataForSync(consolidation, 'CONSOLIDATION-APPROVED'))
        // consolidationSync.scheduleConsolidationApproval(consolidation)
    }

    /* scheduler */
    @After(pattern="RPTMainSyncService.scheduleSync", eval="#{result.action.matches('CONSOLIDATION-.*')}", index=50000) 
    public void scheduleForSync( evt ) {
        def data = evt.result 
        consolidationSync.schedule(data)
    }   


    /*---------------------------------------------------------
    *
    * SEND/RECEIVE HANDLERS
    *
    ---------------------------------------------------------*/
    @After(pattern="RPTMainSyncService.asyncSend", eval="#{result.action.matches('CONSOLIDATION-.*')}") 
    public void sendData( evt ) {
        def syncdata = evt.result 
        consolidationSync.send(syncdata)
    }   

    @After(pattern="RPTMainSyncService.receive", eval="#{args[0].action.matches('CONSOLIDATION-.*')}") 
    public void receiveData(evt){
        def syncdata = evt.args[0]
        consolidationSync.receive(syncdata)
        evt.result.status = 'OK'
    }


    def getDataForSync(consolidation, action) {
        def data = [:]
        data.objid = consolidation.objid
        data.reftype = 'consolidation'
        data.refno = consolidation.txnno
        data.orgid = env.ORGID
        data.action = action
        data.info = [:]
        return data
    }
}

