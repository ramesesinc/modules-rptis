import com.rameses.annotations.*
import com.rameses.util.*
import com.rameses.services.extended.*

class ConsolidationSyncService
{
	@Env
	def env 

	@Service('DateService')
    def dtSvc

	@Service('RPTMainSyncService')
	def syncSvc 

    @Service('RPTSyncService')
    def rptSync

    @Service('RPTSyncSupport')
    def support

    @Service('ConsolidationService')
    def svc

	@Service('ConsolidationSupportService')
    def consolidationSupport 

	@Service('ConsolidationWorkflowService')
	def workflowSvc

	@Service('FAASSyncService')
	def faasSyncSvc


    @DataContext('consolidation')
    def em_consolidation

    @DataContext('consolidation_affectedrpu')
    def em_affectedrpu

    @DataContext('consolidation_task')
    def em_task


	def getActions(){
		return  [
	    	'CONSOLIDATION-FORAPPROVAL': [send: getForApproval, receive: postForApproval, schedule: scheduleSubmitToProvince],
	    	'CONSOLIDATION-REQUIREMENTS': [send: {}, receive: {}, schedule: scheduleRequirements],
	    	'CONSOLIDATION-FAAS-APPROVED': [send: getApprovedFaas, receive: postApprovedFaas, schedule: {}],
	    	'CONSOLIDATION-APPROVED': [send: getApprovedConsolidation, receive: postApprovedConsolidation, schedule: scheduleConsolidationApproval],
	    ]
	}

	

	/*---------------------------------------------------------
	*
	* SCHEDULING SYNC SUPPORT 
	*
	---------------------------------------------------------*/
	@ProxyMethod
	public void schedule(data) {
		def action= getActions()[data.action]
		if (!action) throw new Exception('Scheduler not found for action ' + data.action)

		def consolidation = em_consolidation.find([objid: data.objid]).first()
		data.remote = rptSync.getRemoteOrg(consolidation)
        def syncdata = syncSvc.create(data)
		action.schedule(syncdata, consolidation)
	}

	def createItem(item, syncdata, action, async) {
		return [
			refid: item.objid, 
			reftype: syncdata.reftype, 
			refno: syncdata.refno, 
			async: (async == null ? syncdata.async : async),
			action: (action ? action : syncdata.action),
			dependedaction: syncdata.dependedaction,
			info: [:]
		]
	}

	void createSyncItem(entity, syncdata, action) {
		createSyncItem(entity, syncdata, action, null)
	}

	void createSyncItem(entity, syncdata, action, async) {
		def item = createItem(entity, syncdata, action, async)
        syncSvc.createItem(syncdata, item)
	}

	
	def scheduleSubmitToProvince = {syncdata, consolidation ->
		syncdata.info = syncdata.info ? syncdata.info : [:]
    	syncdata.info.txntype = 'CS'
    	
    	def consolidatedfaas = [objid: consolidation.newfaasid]
    	faasSyncSvc.scheduleFaasData(syncdata, consolidatedfaas)

		svc.getAffectedRpus(consolidation.objid).each {
			syncdata.async = true
			faasSyncSvc.scheduleFaasData(syncdata, [objid: it.newfaasid])
        }

        syncdata.async = false
        syncdata.dependedaction = 'FAAS-DATA'
        createSyncItem(consolidation, syncdata, 'CONSOLIDATION-FORAPPROVAL')
        syncdata.dependedaction = null

        rptSync.scheduleExaminations(syncdata, consolidation.objid)
    	rptSync.scheduleRequirements(syncdata, consolidation.objid)
	}

	def scheduleRequirements = {syncdata, consolidation ->
		rptSync.scheduleRequirements(syncdata, consolidation.objid)
	}

	def scheduleConsolidationApproval = {syncdata, consolidation ->
		def faas = [objid: consolidation.newfaasid]
    	createSyncItem(faas, syncdata, 'CONSOLIDATION-FAAS-APPROVED')
		
		svc.getAffectedRpus(consolidation.objid).each {
			syncdata.async = true
        	createSyncItem(faas, syncdata, 'CONSOLIDATION-FAAS-APPROVED')
        }

		syncdata.async = false
		syncdata.dependedaction = 'CONSOLIDATION-FAAS-APPROVED'
        createSyncItem(consolidation, syncdata, 'CONSOLIDATION-APPROVED')
        syncdata.dependedaction = null
	}


	
	/*---------------------------------------------------------
	* SEND/RECEIVE HANDLERS 
	---------------------------------------------------------*/
	@ProxyMethod
	public void send(syncdata) {
		rptSync.send(syncdata, getActions())
	}

	@ProxyMethod
	public void receive(syncdata) {
		rptSync.receive(syncdata, getActions())
	}

	/*---------------------------------------------------------
	* SUPPORT METHODS
	---------------------------------------------------------*/
	def getForApproval = {syncdata ->
		def consolidation = [objid: syncdata.refid]
		return consolidationSupport.getForApproval(consolidation)
	}

	def postForApproval = {syncdata ->
		def consolidation = syncdata.data 
		consolidationSupport.postForApproval(consolidation)
		startWorkflow(syncdata, consolidation)
	}

	def getApprovedFaas = {syncdata ->
		def faas = [objid: syncdata.refid]
		return consolidationSupport.getApprovedFaas(faas)
	}

	def postApprovedFaas = {syncdata ->
		def faas = syncdata.data 
		consolidationSupport.postApprovedFaas(faas)

	}

	def getApprovedConsolidation = {syncdata ->
		def consolidation = [objid: syncdata.refid]
		return consolidationSupport.getApprovedConsolidation(consolidation)
	}

	def postApprovedConsolidation = {syncdata ->
		def consolidation = syncdata.data 
		consolidationSupport.postApprovedConsolidation(consolidation)

	}


	void startWorkflow(syncdata, consolidation){
		def currtask = em_task.select('objid').where('refid = :objid and enddate is null', consolidation).first()
		if (!currtask) {
			def tasks = workflowSvc.start([refid:consolidation.objid, data:consolidation])
			if (tasks){
				consolidation.taskid = tasks[0].objid
			}
			notifyGroup(syncdata, consolidation)
		}
	}

	void notifyGroup(syncdata, consolidation){
        def param = [:]
        param.objid = consolidation.objid 
        param.sender = syncdata.sender
        param.recipientid = 'assign-receiver'
        param.filetype = 'Consolidation'
        param.msg = 'Consolidation No. ' + consolidation.txnno + ' (assign-receiver) submitted by ' + syncdata.sender.name + '.'
        param.taskid = consolidation.taskid 
        support.notifyGroup(param)
	}
}
 