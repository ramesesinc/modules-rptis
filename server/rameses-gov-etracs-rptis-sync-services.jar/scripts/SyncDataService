import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;
import com.rameses.sync.ObjectWriter;
import com.rameses.util.Encoder;

class SyncDataService {
	@Env 
	def env 

	@Service()
	def self 

	// @Service(value='SyncCoordinatorService', connection='coordinator-script-service')
 //    def coordinator 

    @Service('DateService')
    def dtSvc 

    @Service('Var')
    def var

	@DataContext('sync_data')
	def em_sync

	@DataContext('sync_data_forprocess')
	def em_sync_forprocess

	@DataContext('sync_data_pending')
	def em_sync_pending

	@DataContext('sys_org')
    def em_org 


	@ProxyMethod
	public def create(data) {
		data.sender = [objid: env.USERID, name: env.FULLNAME]
		data.orgid = env.ORGID
		em_sync.create(data)
		return data 
	}

	//intercepted to export transaction specific data
	@ProxyMethod
	public def export(syncdata) {
		syncdata.state = 'PACKAGING'
		em_sync.find([objid: syncdata.objid]).update([state: syncdata.state])
		def writer = new ObjectWriter(syncdata.fileid)
		return [writer: writer, syncdata: syncdata]
	}

	@ProxyMethod
	public def send(syncdata) {
		syncdata.state = 'SENDING'
		em_sync.update(syncdata)
		em_sync_forprocess.save(syncdata)
		return syncdata
	}

	@ProxyMethod
	public def sync(data) {
		println 'Sync action: ' + data.action
		if (data.filetype == 'syncdata') {
			def syncdata = data.data
			em_sync.find([objid: syncdata.objid]).update([state: 'SYNC'])
		} 
		return data
	}

	@ProxyMethod
	public def schedule(refid, refno, reftype, action, remote) {
		def data = [objid: 'SYNC' + new java.rmi.server.UID()]
		data.state = 'PENDING'
        data.refid = refid
        data.refno = refno
        data.reftype = reftype
        data.action = action
        data.dtfiled = dtSvc.serverDate
        data.remote = remote 
        data.fileid = remote.orgcode + Encoder.SHA1.encode(data.objid)
        return create(data)
	}


	@ProxyMethod
	public def getForProcessItems(){
		return em_sync.where('forprocess.objid is not null')
				.orderBy('dtfiled, idx')
				.limit(10)
				.list()
	}

	@ProxyMethod
	public def getPendingItems(syncdata){
		def filter = 'pending.objid is not null'

		if (syncdata.orgid) {
			filter = 'orgid = :orgid and pending.objid is not null'
		}

		return em_sync.where(filter, syncdata)
				.orderBy('dtfiled')
				.limit(10)
				.list()
	}

	@ProxyMethod
	public void movePendingToForProcess(){
		def pendings = em_sync.where('pending.objid is not null and expirydate <= :currdate', [currdate: dtSvc.serverDate])
				.orderBy('dtfiled')
				.limit(10)
				.list()

		pendings.each{
			em_sync_forprocess.create(it)
			em_sync_pending.delete(it)
		}
	}

	@ProxyMethod
    public def getRemoteOrg(entity){
        def rootorg = em_org.find([root: 1]).first() 
        if (!rootorg) throw new Exception('Root ORG is not set.')

        if (!entity.lguid) entity.lguid = env.ORGID 

        def org = em_org.find([objid: entity.lguid]).first()
        if (!org) throw new Exception('ORG ' + entity.lguid + ' does not exist or has been deleted.')

        def remote = [:]

        if ('PROVINCE'.equalsIgnoreCase(rootorg.orgclass)) {
            remote.orgid = org.objid 
            remote.orgcode = org.code.replaceAll('-', '')
            remote.orgclass = org.orgclass 
        } else if ('MUNICIPALITY'.equalsIgnoreCase(rootorg.orgclass)) {
            def prov = em_org.find([objid:rootorg.parent.objid]).first()
            remote.orgid = prov.objid 
            remote.orgcode = prov.code.replaceAll('-', '')
            remote.orgclass = prov.orgclass 
        } else {
            throw new Exception('Org cannot be found for LGUID ' + entity.lguid + '.' )
        }
        return remote
    }   


	void completed(data){
		em_sync_forprocess.delete(data)
		em_sync_pending.delete(data)
		em_sync.delete(data)
	}

	void moveToPending(syncdata, err){
		syncdata.error = err.message 
		syncdata.expirydate = dtSvc.add(dtSvc.serverDate, '1m')
		em_sync_pending.save(syncdata)
		em_sync_forprocess.delete(syncdata)
		println 'SyncService [ERROR] : ' + err.message 
	}

}

