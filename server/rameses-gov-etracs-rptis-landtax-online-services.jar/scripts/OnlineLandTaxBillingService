import com.rameses.annotations.*;
import com.rameses.util.*;

class OnlineLandTaxBillingService {

	@Service("BusinessCashReceiptService")
	def svc;

	@Service("DateService")
	def dateSvc;

	@DataContext("business_application")
	def appEm;

	@Service("PersistenceService")
	def persistenceSvc;	

	@Service('BusinessPostPaymentService')
	def postPaymentSvc;

	@Service("NumberService")
	def numSvc;

	@ProxyMethod
	public def getBilling(params) {
		def bill = generateBilling(params)
        def rptledger = bill.rptledger

        def data = [:]
        data.info = [
            billid: bill.objid,
            billno: bill.barcode,
            billdate: bill.billdate,
            billtoyear: bill.billtoyear,
            billtoqtr: bill.billtoqtr,
            billperiod: buildPeriod(rptledger),
            rptledgerid: rptledger.objid,
            taxpayer: rptledger.taxpayer,
            tdno: rptledger.tdno, 
            fullpin: rptledger.fullpin, 
            rputype: rptledger.rputype, 
            administrator: rptledger.administrator, 
            totalareasqm: rptledger.totalareasqm, 
            totals: bill.totals,
            items: rptledger.items,
            amount: bill.totals.total,
            fromyear: rptledger.fromyear,
            fromqtr: rptledger.fromqtr,
            toyear: rptledger.toyear,
            toqtr: rptledger.toqtr,
        ]
        data.amount = bill.totals.total 
        result.putAll(data)
	}

	@ProxyMethod
	public def verifyPayment(params) {
		def r = [:]
		r.appno = o.refno;
		if ( o.info?.qtr ) r.qtr = o.info.qtr; 
		def z = generateBilling( r );
		if ( o.amount != z.amount ) 
			throw new Exception('Bill amount has changed from '+ o.amount +' to '+ z.amount); 
		o.businessid = z.app.business.objid;
		o.applicationid = z.app.objid;
		o.appyear = z.app.appyear; 
		o.taxfees = z.taxfees;
		o.expirydate = z.expirydate; 
		o.items = z.items;
		return o;
	}

	@ProxyMethod
	public void postPayment(  def eor ) {
		def bill = generateBilling([refno:eor.info.barcode])
        eor.ledgers = [bill.rptledger]
        eor.rptledger = bill.rptledger 
        postPaymentSvc.buildCashReceiptItemsAndShares(eor)
	}

	def generateBilling(params){
        def bill = [:]
        if (!env.ORGID) env.ORGID = params.orgcode 

        if (params.refno.startsWith(BARCODE_PREFIX)){
            params.barcodeid = params.refno 
            bill = billSvc.getBillByBarcode(params)
            bill._forpayment = true
            bill = billSvc.generateBill(bill)
        }
        else{
            params.tdno = params.refno 
            if (params.billtoyear) params.billtoyear = toInt(params.billtoyear)
            if (params.billtoqtr) params.billtoqtr = toInt(params.billtoqtr)
            bill = billSvc.generateBillByTdNo(params)
        }
        bill.rptledger = bill.remove('ledgers')[0]
        return bill 
    }

    def buildPeriod(rptledger){
        def period = ''
        if (rptledger.fromyear == rptledger.toyear && rptledger.fromqtr == 1 && rptledger.toqtr == 4){
            period = '' + rptledger.fromyear 
        } 
        else if (rptledger.fromyear == rptledger.toyear && rptledger.fromqtr == rptledger.toqtr){
            period = rptledger.fromqtr + 'Q, ' + rptledger.fromyear 
        }
        else if (rptledger.fromyear == rptledger.toyear){
            period = rptledger.fromqtr + '' + rptledger.toqtr +  'Q, ' + rptledger.fromyear 
        }
        else if (rptledger.fromqtr == 1 && rptledger.toqtr == 4){
            period = 'FULL ' + rptledger.fromyear + ' - ' + rptledger.toyear
        }
        else {
            period = rptledger.fromqtr + 'Q, ' + rptledger.fromyear + ' - ' + rptledger.toqtr + 'Q, ' + rptledger.toyear
        }

        return period
    }

    int toInt(val){
        if (val instanceof Integer) return val 
        try{
            return new BigDecimal(val+'').intValue()
        }
        catch(e){
            return 0 
        }
    }
}